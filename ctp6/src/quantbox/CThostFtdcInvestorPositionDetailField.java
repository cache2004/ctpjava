package quantbox;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * 投资者持仓明细<br>
 * <i>native declaration : ThostFtdcUserApiStruct.h:3950</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CThostFtdcInvestorPositionDetailField extends Structure {
	/**
	 * 合约代码<br>
	 * C type : TThostFtdcInstrumentIDType
	 */
	public byte[] InstrumentID = new byte[31];
	/**
	 * 经纪公司代码<br>
	 * C type : TThostFtdcBrokerIDType
	 */
	public byte[] BrokerID = new byte[11];
	/**
	 * 投资者代码<br>
	 * C type : TThostFtdcInvestorIDType
	 */
	public byte[] InvestorID = new byte[13];
	/**
	 * 投机套保标志<br>
	 * C type : TThostFtdcHedgeFlagType
	 */
	public byte HedgeFlag;
	/**
	 * 买卖<br>
	 * C type : TThostFtdcDirectionType
	 */
	public byte Direction;
	/**
	 * 开仓日期<br>
	 * C type : TThostFtdcDateType
	 */
	public byte[] OpenDate = new byte[9];
	/**
	 * 成交编号<br>
	 * C type : TThostFtdcTradeIDType
	 */
	public byte[] TradeID = new byte[21];
	/**
	 * 数量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int Volume;
	/**
	 * 开仓价<br>
	 * C type : TThostFtdcPriceType
	 */
	public double OpenPrice;
	/**
	 * 交易日<br>
	 * C type : TThostFtdcDateType
	 */
	public byte[] TradingDay = new byte[9];
	/**
	 * 结算编号<br>
	 * C type : TThostFtdcSettlementIDType
	 */
	public int SettlementID;
	/**
	 * 成交类型<br>
	 * C type : TThostFtdcTradeTypeType
	 */
	public byte TradeType;
	/**
	 * 组合合约代码<br>
	 * C type : TThostFtdcInstrumentIDType
	 */
	public byte[] CombInstrumentID = new byte[31];
	/**
	 * 交易所代码<br>
	 * C type : TThostFtdcExchangeIDType
	 */
	public byte[] ExchangeID = new byte[9];
	/**
	 * 逐日盯市平仓盈亏<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double CloseProfitByDate;
	/**
	 * 逐笔对冲平仓盈亏<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double CloseProfitByTrade;
	/**
	 * 逐日盯市持仓盈亏<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double PositionProfitByDate;
	/**
	 * 逐笔对冲持仓盈亏<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double PositionProfitByTrade;
	/**
	 * 投资者保证金<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double Margin;
	/**
	 * 交易所保证金<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double ExchMargin;
	/**
	 * 保证金率<br>
	 * C type : TThostFtdcRatioType
	 */
	public double MarginRateByMoney;
	/**
	 * 保证金率(按手数)<br>
	 * C type : TThostFtdcRatioType
	 */
	public double MarginRateByVolume;
	/**
	 * 昨结算价<br>
	 * C type : TThostFtdcPriceType
	 */
	public double LastSettlementPrice;
	/**
	 * 结算价<br>
	 * C type : TThostFtdcPriceType
	 */
	public double SettlementPrice;
	/**
	 * 平仓量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int CloseVolume;
	/**
	 * 平仓金额<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double CloseAmount;
	public CThostFtdcInvestorPositionDetailField() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("InstrumentID", "BrokerID", "InvestorID", "HedgeFlag", "Direction", "OpenDate", "TradeID", "Volume", "OpenPrice", "TradingDay", "SettlementID", "TradeType", "CombInstrumentID", "ExchangeID", "CloseProfitByDate", "CloseProfitByTrade", "PositionProfitByDate", "PositionProfitByTrade", "Margin", "ExchMargin", "MarginRateByMoney", "MarginRateByVolume", "LastSettlementPrice", "SettlementPrice", "CloseVolume", "CloseAmount");
	}
	public static class ByReference extends CThostFtdcInvestorPositionDetailField implements Structure.ByReference {
		
	};
	public static class ByValue extends CThostFtdcInvestorPositionDetailField implements Structure.ByValue {
		
	};
}
