package quantbox;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * 产品<br>
 * <i>native declaration : ThostFtdcUserApiStruct.h:322</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CThostFtdcProductField extends Structure {
	/**
	 * 产品代码<br>
	 * C type : TThostFtdcInstrumentIDType
	 */
	public byte[] ProductID = new byte[31];
	/**
	 * 产品名称<br>
	 * C type : TThostFtdcProductNameType
	 */
	public byte[] ProductName = new byte[21];
	/**
	 * 交易所代码<br>
	 * C type : TThostFtdcExchangeIDType
	 */
	public byte[] ExchangeID = new byte[9];
	/**
	 * 产品类型<br>
	 * C type : TThostFtdcProductClassType
	 */
	public byte ProductClass;
	/**
	 * 合约数量乘数<br>
	 * C type : TThostFtdcVolumeMultipleType
	 */
	public int VolumeMultiple;
	/**
	 * 最小变动价位<br>
	 * C type : TThostFtdcPriceType
	 */
	public double PriceTick;
	/**
	 * 市价单最大下单量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int MaxMarketOrderVolume;
	/**
	 * 市价单最小下单量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int MinMarketOrderVolume;
	/**
	 * 限价单最大下单量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int MaxLimitOrderVolume;
	/**
	 * 限价单最小下单量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int MinLimitOrderVolume;
	/**
	 * 持仓类型<br>
	 * C type : TThostFtdcPositionTypeType
	 */
	public byte PositionType;
	/**
	 * 持仓日期类型<br>
	 * C type : TThostFtdcPositionDateTypeType
	 */
	public byte PositionDateType;
	/**
	 * 平仓处理类型<br>
	 * C type : TThostFtdcCloseDealTypeType
	 */
	public byte CloseDealType;
	/**
	 * 交易币种类型<br>
	 * C type : TThostFtdcCurrencyIDType
	 */
	public byte[] TradeCurrencyID = new byte[4];
	/**
	 * 质押资金可用范围<br>
	 * C type : TThostFtdcMortgageFundUseRangeType
	 */
	public byte MortgageFundUseRange;
	/**
	 * 交易所产品代码<br>
	 * C type : TThostFtdcInstrumentIDType
	 */
	public byte[] ExchangeProductID = new byte[31];
	/**
	 * 合约基础商品乘数<br>
	 * C type : TThostFtdcUnderlyingMultipleType
	 */
	public double UnderlyingMultiple;
	public CThostFtdcProductField() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ProductID", "ProductName", "ExchangeID", "ProductClass", "VolumeMultiple", "PriceTick", "MaxMarketOrderVolume", "MinMarketOrderVolume", "MaxLimitOrderVolume", "MinLimitOrderVolume", "PositionType", "PositionDateType", "CloseDealType", "TradeCurrencyID", "MortgageFundUseRange", "ExchangeProductID", "UnderlyingMultiple");
	}
	public static class ByReference extends CThostFtdcProductField implements Structure.ByReference {
		
	};
	public static class ByValue extends CThostFtdcProductField implements Structure.ByValue {
		
	};
}
