package quantbox;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * 投资者组合持仓明细<br>
 * <i>native declaration : ThostFtdcUserApiStruct.h:4314</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CThostFtdcInvestorPositionCombineDetailField extends Structure {
	/**
	 * 交易日<br>
	 * C type : TThostFtdcDateType
	 */
	public byte[] TradingDay = new byte[9];
	/**
	 * 开仓日期<br>
	 * C type : TThostFtdcDateType
	 */
	public byte[] OpenDate = new byte[9];
	/**
	 * 交易所代码<br>
	 * C type : TThostFtdcExchangeIDType
	 */
	public byte[] ExchangeID = new byte[9];
	/**
	 * 结算编号<br>
	 * C type : TThostFtdcSettlementIDType
	 */
	public int SettlementID;
	/**
	 * 经纪公司代码<br>
	 * C type : TThostFtdcBrokerIDType
	 */
	public byte[] BrokerID = new byte[11];
	/**
	 * 投资者代码<br>
	 * C type : TThostFtdcInvestorIDType
	 */
	public byte[] InvestorID = new byte[13];
	/**
	 * 组合编号<br>
	 * C type : TThostFtdcTradeIDType
	 */
	public byte[] ComTradeID = new byte[21];
	/**
	 * 撮合编号<br>
	 * C type : TThostFtdcTradeIDType
	 */
	public byte[] TradeID = new byte[21];
	/**
	 * 合约代码<br>
	 * C type : TThostFtdcInstrumentIDType
	 */
	public byte[] InstrumentID = new byte[31];
	/**
	 * 投机套保标志<br>
	 * C type : TThostFtdcHedgeFlagType
	 */
	public byte HedgeFlag;
	/**
	 * 买卖<br>
	 * C type : TThostFtdcDirectionType
	 */
	public byte Direction;
	/**
	 * 持仓量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int TotalAmt;
	/**
	 * 投资者保证金<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double Margin;
	/**
	 * 交易所保证金<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double ExchMargin;
	/**
	 * 保证金率<br>
	 * C type : TThostFtdcRatioType
	 */
	public double MarginRateByMoney;
	/**
	 * 保证金率(按手数)<br>
	 * C type : TThostFtdcRatioType
	 */
	public double MarginRateByVolume;
	/**
	 * 单腿编号<br>
	 * C type : TThostFtdcLegIDType
	 */
	public int LegID;
	/**
	 * 单腿乘数<br>
	 * C type : TThostFtdcLegMultipleType
	 */
	public int LegMultiple;
	/**
	 * 组合持仓合约编码<br>
	 * C type : TThostFtdcInstrumentIDType
	 */
	public byte[] CombInstrumentID = new byte[31];
	/**
	 * 成交组号<br>
	 * C type : TThostFtdcTradeGroupIDType
	 */
	public int TradeGroupID;
	public CThostFtdcInvestorPositionCombineDetailField() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("TradingDay", "OpenDate", "ExchangeID", "SettlementID", "BrokerID", "InvestorID", "ComTradeID", "TradeID", "InstrumentID", "HedgeFlag", "Direction", "TotalAmt", "Margin", "ExchMargin", "MarginRateByMoney", "MarginRateByVolume", "LegID", "LegMultiple", "CombInstrumentID", "TradeGroupID");
	}
	public static class ByReference extends CThostFtdcInvestorPositionCombineDetailField implements Structure.ByReference {
		
	};
	public static class ByValue extends CThostFtdcInvestorPositionCombineDetailField implements Structure.ByValue {
		
	};
}
