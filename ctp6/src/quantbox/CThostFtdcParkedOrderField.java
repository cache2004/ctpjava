package quantbox;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * 预埋单<br>
 * <i>native declaration : ThostFtdcUserApiStruct.h:4359</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CThostFtdcParkedOrderField extends Structure {
	/**
	 * 经纪公司代码<br>
	 * C type : TThostFtdcBrokerIDType
	 */
	public byte[] BrokerID = new byte[11];
	/**
	 * 投资者代码<br>
	 * C type : TThostFtdcInvestorIDType
	 */
	public byte[] InvestorID = new byte[13];
	/**
	 * 合约代码<br>
	 * C type : TThostFtdcInstrumentIDType
	 */
	public byte[] InstrumentID = new byte[31];
	/**
	 * 报单引用<br>
	 * C type : TThostFtdcOrderRefType
	 */
	public byte[] OrderRef = new byte[13];
	/**
	 * 用户代码<br>
	 * C type : TThostFtdcUserIDType
	 */
	public byte[] UserID = new byte[16];
	/**
	 * 报单价格条件<br>
	 * C type : TThostFtdcOrderPriceTypeType
	 */
	public byte OrderPriceType;
	/**
	 * 买卖方向<br>
	 * C type : TThostFtdcDirectionType
	 */
	public byte Direction;
	/**
	 * 组合开平标志<br>
	 * C type : TThostFtdcCombOffsetFlagType
	 */
	public byte[] CombOffsetFlag = new byte[5];
	/**
	 * 组合投机套保标志<br>
	 * C type : TThostFtdcCombHedgeFlagType
	 */
	public byte[] CombHedgeFlag = new byte[5];
	/**
	 * 价格<br>
	 * C type : TThostFtdcPriceType
	 */
	public double LimitPrice;
	/**
	 * 数量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int VolumeTotalOriginal;
	/**
	 * 有效期类型<br>
	 * C type : TThostFtdcTimeConditionType
	 */
	public byte TimeCondition;
	/**
	 * GTD日期<br>
	 * C type : TThostFtdcDateType
	 */
	public byte[] GTDDate = new byte[9];
	/**
	 * 成交量类型<br>
	 * C type : TThostFtdcVolumeConditionType
	 */
	public byte VolumeCondition;
	/**
	 * 最小成交量<br>
	 * C type : TThostFtdcVolumeType
	 */
	public int MinVolume;
	/**
	 * 触发条件<br>
	 * C type : TThostFtdcContingentConditionType
	 */
	public byte ContingentCondition;
	/**
	 * 止损价<br>
	 * C type : TThostFtdcPriceType
	 */
	public double StopPrice;
	/**
	 * 强平原因<br>
	 * C type : TThostFtdcForceCloseReasonType
	 */
	public byte ForceCloseReason;
	/**
	 * 自动挂起标志<br>
	 * C type : TThostFtdcBoolType
	 */
	public int IsAutoSuspend;
	/**
	 * 业务单元<br>
	 * C type : TThostFtdcBusinessUnitType
	 */
	public byte[] BusinessUnit = new byte[21];
	/**
	 * 请求编号<br>
	 * C type : TThostFtdcRequestIDType
	 */
	public int RequestID;
	/**
	 * 用户强评标志<br>
	 * C type : TThostFtdcBoolType
	 */
	public int UserForceClose;
	/**
	 * 交易所代码<br>
	 * C type : TThostFtdcExchangeIDType
	 */
	public byte[] ExchangeID = new byte[9];
	/**
	 * 预埋报单编号<br>
	 * C type : TThostFtdcParkedOrderIDType
	 */
	public byte[] ParkedOrderID = new byte[13];
	/**
	 * 用户类型<br>
	 * C type : TThostFtdcUserTypeType
	 */
	public byte UserType;
	/**
	 * 预埋单状态<br>
	 * C type : TThostFtdcParkedOrderStatusType
	 */
	public byte Status;
	/**
	 * 错误代码<br>
	 * C type : TThostFtdcErrorIDType
	 */
	public int ErrorID;
	/**
	 * 错误信息<br>
	 * C type : TThostFtdcErrorMsgType
	 */
	public byte[] ErrorMsg = new byte[81];
	/**
	 * 互换单标志<br>
	 * C type : TThostFtdcBoolType
	 */
	public int IsSwapOrder;
	public CThostFtdcParkedOrderField() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "UserForceClose", "ExchangeID", "ParkedOrderID", "UserType", "Status", "ErrorID", "ErrorMsg", "IsSwapOrder");
	}
	public static class ByReference extends CThostFtdcParkedOrderField implements Structure.ByReference {
		
	};
	public static class ByValue extends CThostFtdcParkedOrderField implements Structure.ByValue {
		
	};
}
