package quantbox;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * 经纪公司交易参数<br>
 * <i>native declaration : ThostFtdcUserApiStruct.h:4926</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CThostFtdcBrokerTradingParamsField extends Structure {
	/**
	 * 经纪公司代码<br>
	 * C type : TThostFtdcBrokerIDType
	 */
	public byte[] BrokerID = new byte[11];
	/**
	 * 投资者代码<br>
	 * C type : TThostFtdcInvestorIDType
	 */
	public byte[] InvestorID = new byte[13];
	/**
	 * 保证金价格类型<br>
	 * C type : TThostFtdcMarginPriceTypeType
	 */
	public byte MarginPriceType;
	/**
	 * 盈亏算法<br>
	 * C type : TThostFtdcAlgorithmType
	 */
	public byte Algorithm;
	/**
	 * 可用是否包含平仓盈利<br>
	 * C type : TThostFtdcIncludeCloseProfitType
	 */
	public byte AvailIncludeCloseProfit;
	/**
	 * 币种代码<br>
	 * C type : TThostFtdcCurrencyIDType
	 */
	public byte[] CurrencyID = new byte[4];
	/**
	 * 期权权利金价格类型<br>
	 * C type : TThostFtdcOptionRoyaltyPriceTypeType
	 */
	public byte OptionRoyaltyPriceType;
	public CThostFtdcBrokerTradingParamsField() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("BrokerID", "InvestorID", "MarginPriceType", "Algorithm", "AvailIncludeCloseProfit", "CurrencyID", "OptionRoyaltyPriceType");
	}
	/**
	 * @param BrokerID 经纪公司代码<br>
	 * C type : TThostFtdcBrokerIDType<br>
	 * @param InvestorID 投资者代码<br>
	 * C type : TThostFtdcInvestorIDType<br>
	 * @param MarginPriceType 保证金价格类型<br>
	 * C type : TThostFtdcMarginPriceTypeType<br>
	 * @param Algorithm 盈亏算法<br>
	 * C type : TThostFtdcAlgorithmType<br>
	 * @param AvailIncludeCloseProfit 可用是否包含平仓盈利<br>
	 * C type : TThostFtdcIncludeCloseProfitType<br>
	 * @param CurrencyID 币种代码<br>
	 * C type : TThostFtdcCurrencyIDType<br>
	 * @param OptionRoyaltyPriceType 期权权利金价格类型<br>
	 * C type : TThostFtdcOptionRoyaltyPriceTypeType
	 */
	public CThostFtdcBrokerTradingParamsField(byte BrokerID[], byte InvestorID[], byte MarginPriceType, byte Algorithm, byte AvailIncludeCloseProfit, byte CurrencyID[], byte OptionRoyaltyPriceType) {
		super();
		if ((BrokerID.length != this.BrokerID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.BrokerID = BrokerID;
		if ((InvestorID.length != this.InvestorID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.InvestorID = InvestorID;
		this.MarginPriceType = MarginPriceType;
		this.Algorithm = Algorithm;
		this.AvailIncludeCloseProfit = AvailIncludeCloseProfit;
		if ((CurrencyID.length != this.CurrencyID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.CurrencyID = CurrencyID;
		this.OptionRoyaltyPriceType = OptionRoyaltyPriceType;
	}
	public static class ByReference extends CThostFtdcBrokerTradingParamsField implements Structure.ByReference {
		
	};
	public static class ByValue extends CThostFtdcBrokerTradingParamsField implements Structure.ByValue {
		
	};
}
