package quantbox;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * 期货资金转银行请求响应<br>
 * <i>native declaration : ThostFtdcUserApiStruct.h:213</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CThostFtdcTransferFutureToBankRspField extends Structure {
	/**
	 * 响应代码<br>
	 * C type : TThostFtdcRetCodeType
	 */
	public byte[] RetCode = new byte[5];
	/**
	 * 响应信息<br>
	 * C type : TThostFtdcRetInfoType
	 */
	public byte[] RetInfo = new byte[129];
	/**
	 * 资金账户<br>
	 * C type : TThostFtdcAccountIDType
	 */
	public byte[] FutureAccount = new byte[13];
	/**
	 * 转帐金额<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double TradeAmt;
	/**
	 * 应收客户手续费<br>
	 * C type : TThostFtdcMoneyType
	 */
	public double CustFee;
	/**
	 * 币种<br>
	 * C type : TThostFtdcCurrencyCodeType
	 */
	public byte[] CurrencyCode = new byte[4];
	public CThostFtdcTransferFutureToBankRspField() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("RetCode", "RetInfo", "FutureAccount", "TradeAmt", "CustFee", "CurrencyCode");
	}
	/**
	 * @param RetCode 响应代码<br>
	 * C type : TThostFtdcRetCodeType<br>
	 * @param RetInfo 响应信息<br>
	 * C type : TThostFtdcRetInfoType<br>
	 * @param FutureAccount 资金账户<br>
	 * C type : TThostFtdcAccountIDType<br>
	 * @param TradeAmt 转帐金额<br>
	 * C type : TThostFtdcMoneyType<br>
	 * @param CustFee 应收客户手续费<br>
	 * C type : TThostFtdcMoneyType<br>
	 * @param CurrencyCode 币种<br>
	 * C type : TThostFtdcCurrencyCodeType
	 */
	public CThostFtdcTransferFutureToBankRspField(byte RetCode[], byte RetInfo[], byte FutureAccount[], double TradeAmt, double CustFee, byte CurrencyCode[]) {
		super();
		if ((RetCode.length != this.RetCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.RetCode = RetCode;
		if ((RetInfo.length != this.RetInfo.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.RetInfo = RetInfo;
		if ((FutureAccount.length != this.FutureAccount.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.FutureAccount = FutureAccount;
		this.TradeAmt = TradeAmt;
		this.CustFee = CustFee;
		if ((CurrencyCode.length != this.CurrencyCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.CurrencyCode = CurrencyCode;
	}
	public static class ByReference extends CThostFtdcTransferFutureToBankRspField implements Structure.ByReference {
		
	};
	public static class ByValue extends CThostFtdcTransferFutureToBankRspField implements Structure.ByValue {
		
	};
}
